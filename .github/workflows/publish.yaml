#
name: Create and publish release

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - .gitignore
      - docs

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  tag-repo:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write
    outputs:
      newtag: ${{ steps.tag.outputs.newtag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Create Tag
        id: tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          DATEFORMATTED=$(date +"%Y.%m")
          RECENT=$(git tag -l --sort=-creatordate | grep $DATEFORMATTED | head -n 1)
          echo "Recent Version: $RECENT"
          NEWPATCH="01"
          if [ "$RECENT" != "" ]; then
            OLDPATCH=$(echo $RECENT | cut -d. -f 3)
            NEWPATCH=$(printf "%02d" $((${OLDPATCH#0}+1)))
          fi
          NEWTAG="$DATEFORMATTED.$NEWPATCH"
          echo "New version set to $NEWTAG"

          git tag $NEWTAG -a -m "Release $NEWTAG"
          git push origin $NEWTAG

          echo "newtag=$NEWTAG" >> $GITHUB_OUTPUT

  build-and-push-image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    needs: tag-repo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=edge,branch=main
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.tag-repo.outputs.newtag }}

      - name: Go Build Cache for Docker
        uses: actions/cache@v4
        with:
          path: go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Inject go-build-cache
        uses: reproducible-containers/buildkit-cache-dance@4b2444fec0c0fb9dbf175a96c094720a692ef810 # v2.1.4
        with:
          cache-source: go-build-cache

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-and-push-chart:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write
      packages: write
    needs: tag-repo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Update Helm Version to git tag
        run: |
          sed -i -e "s/version: \"\"/version: \"${{ needs.tag-repo.outputs.newtag }}\"/g" charts/vpa-prometheus-exporter/Chart.yaml
          sed -i -e "s/appVersion: \"\"/appVersion: \"${{ needs.tag-repo.outputs.newtag }}\"/g" charts/vpa-prometheus-exporter/Chart.yaml

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0 # v1.5.0
        with:
          charts_dir: charts
          config: cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true
          CR_OWNER: "${{ github.repository_owner }}"
          CR_GIT_REPO: "vpa-prometheus-exporter"

